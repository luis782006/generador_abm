@using System;

@using System.Threading;
@inject IDataAccess db;
@using Serilog;
@inject NavigationManager nav;
@inject IDialogService DialogService;
@using Microsoft.Extensions.Logging;
@inject ISnackbar Snackbar;

<MudDialog>
	 <DialogContent>
	 <MudForm @bind-IsValid="@valid">
		 <MudTextField T = "string" Class="pt-2"
				@bind-Value="persona.Nombre" 
			AutoFocus= "true"
				Label="Nombre"
				Variant="Variant.Outlined"
				ReadOnly="@SoloLectura"
				Margin="Margin.Dense"
				Required="true"
				RequiredError="Ingrese su texto de error"
				Immediate="true" />

		 <MudTextField T = "string" Class="pt-2"
				@bind-Value="persona.Apellido" 
				Label="Apellido"
				Variant="Variant.Outlined"
				ReadOnly="@SoloLectura"
				Margin="Margin.Dense"
				Required="true"
				RequiredError="Ingrese su texto de error"
				Immediate="true" />

		 <MudTextField T = "int?" Class="pt-2"
				@bind-Value="persona.Edad" 
				Label="Edad"
				Variant="Variant.Outlined"
				ReadOnly="@SoloLectura"
				Margin="Margin.Dense"
				Required="true"
				RequiredError="Ingrese su texto de error"
				Immediate="true" />

		 <MudCheckBox  Color = "Color.Surface" Class="pt-2"
				 @bind-Checked="persona.Trabaja" 
				ReadOnly="@SoloLectura"/>

		 <MudTextField 
				 T="DateTime?"
				  InputType="InputType.Date" Format="dd/MM/yyyy" Class="pt-2"
				 @bind-Date="persona.Cumpleanos" 
				Label="Cumpleanos"
				Variant="Variant.Outlined"
				ReadOnly="@SoloLectura"
				Margin="Margin.Dense"
				Required="true"
				RequiredError="Ingrese su texto de error"
				Immediate="true" />

	 </MudForm>
	 </DialogContent>
	 <DialogActions>
		 @if (Modo=="Ver")
		 {
			 <MudButton OnClick="Cancelar" 
				 Color="Color.Warning"
				 Variant="Variant.Outlined"
				 StartIcon="@Icons.Filled.Cancel">
		 Cerrar
			 </MudButton>
		 }
		 else
		 {
			 <MudButton OnClick="Cancelar" 
				 Color="Color.Warning"
				 Variant="Variant.Outlined"
				 StartIcon="@Icons.Filled.Cancel">
		 Cancelar
			 </MudButton>
		 }

		 @if (!IsModoVer)
			 {
			 <MudButton  @onclick="@((e)=>AccionModo())"
				 Color="Color.Success"
				 Variant="Variant.Filled"
				 StartIcon="@Icons.Material.Filled.Save">
			 @TituloBotonAccion
			 </MudButton>
			 }
</DialogActions>
</MudDialog>
@code {
	 //Todo Dialog-----
	 [CascadingParameter] MudDialogInstance MudDialog { get; set; }
	 [Parameter] public string Modo { get; set; }
	 [Parameter] public Decimal ID {get; set;} // corriga el tipo

	 // INSTANCIA DE OBJETO
		 Persona persona=new Persona();

	 private bool SoloLectura = false;
	 bool valid=false;
	 string TituloBotonAccion="";
	 private string TituloBotonCancelar="";
	 private bool IsModoVer=false;

//Cargar Formulario.Ejecucion de codigo por Modo recibido
 protected override async Task OnInitializedAsync()
	 {
		 var personaQuery=await db.ObtenerListadoAsync<Persona, dynamic>(Persona.QueryBase + 
									 " Where ID_Persona = @ID_Persona", new { ID_Persona = ID} );
		 switch (Modo)
		 { 
		 //ModoEdicion Ver
			 case "Ver":
				IsModoVer = false;
				 SoloLectura=true;

				 persona=personaQuery.FirstOrDefault();
				 // Agregue codigo para usar el objeto
				 break;

		 // ModoEdicion Insertar
			 case "Insertar":
				 persona=personaQuery.FirstOrDefault();
				TituloBotonAccion = "Guardar";
				IsModoVer = true;
				 // Agregue el codigo si es necesario

				 break;
		 // ModoEdicion Editar
			 case "Editar":
				 persona=personaQuery.FirstOrDefault();
				TituloBotonAccion = "Guardar";
				IsModoVer = true;
				 // Agregue el codigo si es necesario

				 break;
		 // ModoEdicion Eliminar
			 case "Eliminar":
				 persona=personaQuery.FirstOrDefault();
				TituloBotonAccion = "Eliminar";
				IsModoVer = true;
				 // Agregue el codigo si es necesario

				 break;
			default:
				 //Agregue código para el caso por defecto
				 break;
		 }
	}

		// Método para accionar por Modo
		public async void AccionModo()
		{
			switch (Modo)
			{
				case "Insertar":
					try
					{
						await db.EjecutarQueryAsync<Persona>(Persona.InsertQuery, persona);
						this.MudDialog.Close(DialogResult.Ok(true));
						Snackbar.Add("Se guardó correctamente", Severity.Success);
					}
					catch (Exception e)
					{
						Snackbar.Add("Error al ejecutar la inserción", Severity.Error);
						Log.Error(e.Message);
					}
					break;
				case "Editar":
					try
					{
						await db.EjecutarQueryAsync<Persona>(Persona.UpdateQuery, persona);
						this.MudDialog.Close(DialogResult.Ok(true));
						Snackbar.Add("Se editó correctamente", Severity.Success);
					}
					catch (Exception e)
					{
						Snackbar.Add("Error al ejecutar la actualización", Severity.Error);
						Log.Error(e.Message);
					}
					break;
				case "Eliminar":
					try
					{
						await db.EjecutarQueryAsync<Persona>(Persona.DeleteQuery, persona);
						this.MudDialog.Close(DialogResult.Ok(true));
						Snackbar.Add("Se eliminó correctamente", Severity.Success);
					}
					catch (Exception e)
					{
						Snackbar.Add("Error al ejecutar la eliminación", Severity.Error);
						Log.Error(e.Message);
					}
					break;
				default:
					// Agregue código para el caso por defecto
					break;
			}
		}

	// Función para mostrar y renombrar los botones
	public void Botones(string Modo,bool IsModoVer, string TituloBotonCancelar)
	{
		if (Modo == "Ver")
		{
			IsModoVer = true;
			TituloBotonCancelar = "Cerrar";
		}
		else if (Modo == "Insertar" || Modo == "Editar")
		{
			IsModoVer = false;
			TituloBotonAccion = "Guardar";
			TituloBotonCancelar = "Cancelar";
		}
		else
		{
			IsModoVer = false;
			TituloBotonAccion = "Eliminar";
			TituloBotonCancelar = "Cancelar";
		}
	}

  void Cancelar() => MudDialog.Cancel();
}
