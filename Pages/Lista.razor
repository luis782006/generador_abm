@page "/componenteLista"
@using Generador_ABM.Data;
@inject AuxService auxService;
@using System.Reflection
@using System.Text;
@inject ISnackbar Snackbar

        <MudText Typo="Typo.h4">@msg</MudText>
        <MudForm @bind-IsValid="@success">

            <MudGrid Class="d-flex align-center justify-content-between py-4" Style="padding:2rem;">
                <MudItem sm="12" xl="4" md="6"  >
                    <MudTextField T="string" @bind-text="@nombreComponente"
                          Placeholder=@placeHolder
                          Margin="Margin.Dense"
                                  Label="Componente Razor"
                                  Variant="Variant.Outlined"                                 
                                  HelperText="Aceptar o Ingresar el nombre del componente" />
                    <MudItem>
                
                        <MudCheckBox @bind-Checked="nombreListComponente" Color="Color.Primary">Aceptar</MudCheckBox>
                    </MudItem>
                </MudItem>
                    <MudItem sm="12" xl="4" md="6" Class="d-flex flex-column ">
                        <MudTextField T="string" @bind-text="@link" 
                                        Margin="Margin.Dense" 
                                        Label="Page" 
                                        Variant="Variant.Outlined"                                                               
                                        Required=true
                                        RequiredError="Sugerencia lista+Nombre de Clase"
                                        style="margin-bottom:1.8rem;"/>
                        <MudItem>
                            <MudText Typo="Typo.subtitle1" style="margin-bottom:1rem;">Link de ruta para acceder al componente</MudText>
                        @*<MudCheckBox @bind-Checked="nombreListComponente" Color="Color.Primary">Aceptar</MudCheckBox>*@
                        </MudItem>
                    </MudItem>
            </MudGrid>
            <MudGrid Class=" py-4" Style="padding:2rem;">
                <MudItem sm="12" xl="4" md="6">
                    <MudTextField T="string" @bind-Value="rutaComponentes"
                          Margin="Margin.Dense"
                          Label="Ruta para guardar los componentes"
                          Variant="Variant.Outlined"
                          HelperText="Ingrese la ruta para guardar los componentes"
                          Required=true                          
                          />

                </MudItem>
            </MudGrid>
        <MudGrid Class="d-flex flex-row align-start justify-content-between py-4" Style="padding:2rem;">
            <MudItem Class="d-flex flex-column">
        <MudText Typo="Typo.h5">Acciones sobre el Objeto de clase</MudText>
            <MudCard Elevation="5">               
                <MudCardMedia Height="0" />
                <MudCardContent>
                    <div style="display:flex; justify-content:center;">
                        <MudImage ObjectFit="ObjectFit.Contain" Height="150" Width="300" ObjectPosition="ObjectPosition.Center " Src="css/mudtableaccion.jpg"  Elevation="25" Class="rounded-lg" />

                    </div>
                    <MudText Typo="Typo.h5">Acciones</MudText>
                    <MudText Typo="Typo.body2">Seleccione las acciones que desee sobre el registro</MudText>
                    <MudItem Class="d-flex flex-row">
                        <MudCheckBox @bind-Checked="@Ver" Color="Color.Primary">Ver </MudCheckBox>
                        <MudCheckBox @bind-Checked="@Editar" Color="Color.Primary">  Editar</MudCheckBox>
                        <MudCheckBox @bind-Checked="@Eliminar" Color="Color.Primary"> Eliminar </MudCheckBox>
                    </MudItem>
                   
                </MudCardContent>
                <MudCardActions Class="d-flex justify-content-center mt-4 ">
                  
                </MudCardActions>
            </MudCard>
           
            </MudItem>
     
        <MudItem Class="d-flex flex-column">
            <MudText Typo="Typo.h5">Crear componente Dialog</MudText>
            <MudCard Elevation="5">
                <MudCardMedia Height="0" />
                <MudCardContent>
                    <div>
                        <MudImage ObjectFit="ObjectFit.Fill" Height="140" Width="380" ObjectPosition="ObjectPosition.Left " Src="css/MudForm.jpg" Elevation="25" Class="rounded-lg" />
                    </div>
                    <MudText Typo="Typo.h5">Dialog</MudText>
                    <MudText Typo="Typo.body2">Se crea el archivo Dialog listando todos los campos.</MudText>
                    <MudText Typo="Typo.body2">Personaliza el front de ser necesario</MudText> 
                    <MudText Typo="Typo.body2" Class="fw-bold fs-6" > <MudIcon Icon="@Icons.Material.Filled.Campaign" />  Nombre de componente a crear</MudText>
                    <MudText Typo="Typo.body2" Class="fw-bold fs-5"> D_@NombreClase</MudText>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-content-center ">
                </MudCardActions>
            </MudCard>
        </MudItem>
        </MudGrid>


      
    <MudGrid >
        <MudItem xl="12" Class="d-flex justify-content-center">
            @*Para produccion*@
            @*<MudButton Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Primary" style="margin-top:-22px; " OnClick="CrearArchivo">Guardar</MudButton>*@
            <MudButton Variant="Variant.Filled"  Color="Color.Primary" style="margin-top:10px; " OnClick="CrearArchivo">Guardar</MudButton>
        </MudItem>
    </MudGrid>
    </MudForm>
                      

@code {
    string msg = "";
    public string NameSpace;
    public string NombreClase = ""; // se pasan datos para test
    string link = ""; // se pasan datos para test

    string placeHolder = "";
    string nombreObjetoRecibido = "";
    int cantAtributos = 0;
    public bool success = true;
    public bool nombreListComponente = false;
    List<Clase> Listado = new List<Clase>();
    string Ruta = "";
    //para produccion
    //string nombreComponente = "";
    //Para Test
    string nombreComponente = "";
    string nombreComponenteMasRuta = "";
    // Solo para Test revisar variable para produccion
    string nombreComponentePopMasRuta = "";
    string rutaComponentes = "";
    //Opciones Crud sobre la clase objeto
    bool Ver = false;
    bool Editar = false;
    bool Eliminar = false;

    //Opciones De Modo para Popup
    bool D_Ver = false;
    bool D_Insertar = false;
    bool D_Editar = false;
    bool D_Eliminar = false;

    bool IsDialog = false;

    List<string> ListaClaseDepurada =new List<string>();

    protected override void OnInitialized()
    {
        List<string> Listado=CargaDeLista();
        placeHolder=$"Listado{NombreClase}";
    }

    public List<string>  CargaDeLista()
    {
        Listado = auxService.Listado;
        NombreClase = auxService.NombreClase;
        NameSpace = auxService.NameSpace;

        msg = "Crear componente razor para Listar clase";

        if (NombreClase != null)
        {
            foreach (var item in Listado)
            {
                //Cargo una lista solo con el nombre de atributo
                ListaClaseDepurada.Add(item.NombreAtributo.ToString());

                Type ListadoAtributos = item.GetType();
                PropertyInfo[] propiedadesListado = ListadoAtributos.GetProperties();

                foreach (var propiedad in propiedadesListado)
                {                    
                    string valor = propiedad.GetValue(item)?.ToString();                                   

                }

            }
        }
        return ListaClaseDepurada;
    }

    // Crear el Archivo Razor
    public void CrearArchivo()
    {
        // para test le mando la ruta directa 
        // para produccion
        Ruta = auxService.Ruta;
        if (nombreListComponente)
        {
            nombreComponente = $"Listado{NombreClase}";
        }
        else
        {
            nombreComponente = char.ToUpper(nombreComponente[0]) + nombreComponente.Substring(1);
        }
        // para test
        //nombreComponenteMasRuta = "C:\\Users\\usuario\\Documents\\Luis\\Archivos csv de pruebas\\" + NombreClase + ".razor";
        //nombreComponentePopMasRuta = "C:\\Users\\usuario\\Documents\\Luis\\Archivos csv de pruebas\\D_" + NombreClase + ".razor";
        // Para produccion
        //***nombreComponenteMasRuta = $"{Ruta}\\{nombreComponente}.razor";
        //***nombreComponentePopMasRuta= $"{Ruta}\\D_" + NombreClase + ".razor";
        NombreClase = auxService.NombreClase;

        nombreComponenteMasRuta = $"{rutaComponentes}\\{nombreComponente}.razor";
        nombreComponentePopMasRuta = $"{rutaComponentes}\\D_{NombreClase}.razor";
        // Obtengo el listado para pasar por parametro en metodo ImprimirVariable
        List<Clase> listAtributos = auxService.Listado;
        string infoFormat = "{first_item}-{last_item} de {all_items}";
        string filtros;
        try
        {
            using (StreamWriter writer = new StreamWriter(nombreComponenteMasRuta))
            {
                Console.WriteLine(nombreComponenteMasRuta);
                StringBuilder sbuilder = new StringBuilder();

                // Copiar el contenido del objeto `writer` al `StringBuilder`

                //Desde el linea page hasta el NameSpace. EL tercer parametro (1) para indicar que es una Vista y no una clase,
                //IsDialog seteado en false
                sbuilder = ManejoComponenteLista.ImprimirInicio(sbuilder, NameSpace,1,IsDialog, link);

                sbuilder = ManejoComponenteLista.ImprimolBarContent(sbuilder, NombreClase);

                sbuilder.AppendLine("@* Cabecera de todos los atributos de la clase *@");
                //Inicio del Header Table
                sbuilder.AppendLine("\t\t<HeaderContent>");
                // se imprime la cabacera del listado con los atributos de la clase
                sbuilder=ManejoComponenteLista.ImprimirCabecera(Listado, sbuilder,NombreClase);
                sbuilder.AppendLine("\t\t</HeaderContent >");

                //se imprime las Acciones y cabeceras de Columnas
                sbuilder.AppendLine("\t\t<RowTemplate>");

                sbuilder.AppendLine("\t\t\t<MudTd Class=\"d-inline-flex justify-center\">");
                sbuilder = ManejoComponenteLista.Acciones(Listado, sbuilder, Ver, Editar, Eliminar, NombreClase);
                sbuilder.AppendLine("\t\t\t</MudTd>");
                // se imprime las columnas
                sbuilder = ManejoComponenteLista.ImprimirColumnas(Listado, sbuilder);

                // cierre de lineas
                sbuilder.AppendLine("\t\t</RowTemplate>");
                sbuilder.AppendLine("\t\t<PagerContent>");
                //PagerContent

                //Paginador
                sbuilder = ManejoComponenteLista.ImprimirPaginador(sbuilder, infoFormat);

                //Inicio CODE @code
                sbuilder = ManejoComponenteLista.ImprimirVariable(sbuilder, NombreClase);

                //Metodo OnAfterRenderAsync
                sbuilder = ManejoComponenteLista.MetodoCargaLista(NombreClase, sbuilder);

                //Metodo de carga
                sbuilder = ManejoComponenteLista.MetodoCargarDatos(NombreClase, sbuilder);

                //Funciones de Filtro de Table
                sbuilder = ManejoComponenteLista.MetodoFiltro(NombreClase, Listado,sbuilder);

                //Funcion para abir Popup en Modo Agregar
                sbuilder = ManejoComponenteLista.ImprimirAccionDialog(sbuilder, NombreClase, Listado);

                // cierre de todo el archivo
                sbuilder.AppendLine("}");                

                //Escribo toda la cadena

                writer.Write(sbuilder.ToString());

            }
            Snackbar.Add($"Se creo el archivo .razor Lista{NombreClase}", Severity.Success);


        }
        catch (Exception e)
        {
            //Console.WriteLine(e.Message);
            Snackbar.Add($"No se pudo crear el archivo .razor Lista{NombreClase} "+ e.Message, Severity.Error);
        }
        nombreComponenteMasRuta = null;


        //CREAR DIALOG SECCIONADO 
        try
        {
            using (StreamWriter writerPop = new StreamWriter(nombreComponentePopMasRuta))
            {
                Console.WriteLine(nombreComponentePopMasRuta);
                StringBuilder sbuilderPop = new StringBuilder();
                // Se imprime los using y inject necesarios
                //IsDialog para sacarle el @page
                IsDialog = true;
                sbuilderPop=ManejoComponenteLista.ImprimirInicio(sbuilderPop, NameSpace,1,IsDialog,link);


                // Se imprime el DialogCOntent de MudDialog y el Form Listando los atributos, 
                sbuilderPop.AppendLine("<MudDialog>");              
                sbuilderPop = ManejoComponentePopup.ImprimirDialogContentForm(sbuilderPop,Listado,NombreClase);

                //Se imprime el DialogActions de MudDialog
                sbuilderPop = ManejoComponentePopup.ImprimirDialogActions(sbuilderPop);

                //Fin MudDialog
                sbuilderPop.AppendLine("</MudDialog>");

                // Inicio de @CODE
                sbuilderPop.AppendLine("@code {");
                //Se imprime variable
                sbuilderPop = ManejoComponentePopup.ImprimirDialogVariable(sbuilderPop, NombreClase, listAtributos);

                // Se imprime Metodo OnInitilized para cargar el objeto
                sbuilderPop = ManejoComponentePopup.ImprimirMetodoOnInitialized(sbuilderPop,NombreClase,Listado);

                //Se imprime Metodo de Insertar(Funcion invocada desde el swicth del Objeto Final)
                sbuilderPop = ManejoComponentePopup.MetodoAccionModo(sbuilderPop, NombreClase);
            
                // Se imprime Metodo de cancelacion
                sbuilderPop = ManejoComponentePopup.ImprimirMetodoCancelacion(sbuilderPop);

                // Fin de @CODE
                sbuilderPop.AppendLine("}");

                writerPop.Write(sbuilderPop.ToString());
                StateHasChanged();
            }

        }
        catch (Exception e)
        {
            Snackbar.Add($"No se pudo crear el archivo Dialog.razor Lista{NombreClase} " + e.Message, Severity.Error);
        }

        Snackbar.Add($"Se creo el archivo .razor Lista{NombreClase}", Severity.Success);




    }


      
}


