@page "/"

@using Generador_ABM.Data;
@using static Generador_ABM.Data.EnumTipoDato;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using System.IO;
@using System.Text;

<PageTitle>Index</PageTitle>
<MudPaper Class="d-flex justify-content-around px-1" Elevation="0">
    <h2>Generador de Clase</h2>
    <h2>Lista de atributos</h2>
</MudPaper>
<MudGrid >
    <MudItem xs="8">
        <MudPaper Class="d-flex align-center justify-center py-4" Elevation=2 style="border-radius:1rem; border:2px solid #594ae2;">
     
        @*Formulario de Clase*@

        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
            <MudText Typo="Typo.h6">Agregue los atributos de la clase y el tipo de dato</MudText>
            <MudGrid>
                <MudItem>
                    <MudTextField @bind-Value="@NameSpace" Label="NameSpace"
                                Class="col-12"
                                Variant="Variant.Outlined" 
                                Margin="Margin.Dense" 
                                style="margin-bottom:0.5rem;"
                                Required="true"
                                RequiredError="Ingrese el namespace"
                                AutoFocus=true />
                </MudItem>
                <MudItem>
                    <MudTextField Class="col-12" @bind-Value="nombreClase" Label="Nombre de la clase"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"            
                                  Required="true"
                                  RequiredError="Ingrese el nombre de la clase">
                    </MudTextField>
                </MudItem>
                <MudItem>
                        <MudTextField Class="col-12" @bind-Value="nombreInterface" Label="Nombre de Interfaz"
                                    Variant="Variant.Outlined"
                                    Margin="Margin.Dense">
                                   
                    </MudTextField>
                </MudItem>
                    <MudItem>
                        <MudTextField Class="col-12" @bind-Value="@rutaArchivo" Label="Ruta" HelperText="Indique la ruta donde se guardaran las clases"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Required="true"
                                      RequiredError="Ingrese la ruta"
                                      >

                        </MudTextField>
                    </MudItem>
            <MudSpacer />

            </MudGrid>
             
            <br />
            <MudGrid>
                <MudItem>
                    <MudText Typo="Typo.h6">Atributos</MudText>
                    <MudTextField @ref="txtAtributo"
                                  Class="col-12" @bind-Value="atributo" Label="Nombre de atributo"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Required="true"
                                  RequiredError="Ingrese el nombre del atributo"></MudTextField>

                </MudItem>

                <MudItem>
                    <MudText Typo="Typo.h6">Tipo de dato</MudText>
                    <MudSelect Class="col-12" TValue="DataType" @bind-Value="tipoDatoSelecionado" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (DataType dataType in Enum.GetValues(typeof(DataType)))
                        {
                            <MudSelectItem Value="dataType">@dataType</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem Class="ml-4">
                    <MudText Typo="Typo.h6">Acepta null</MudText>
                    <MudSwitch @bind-Checked="@aceptaNull" Color="Color.Primary" Style="margin:auto;" />
                </MudItem>
                <MudItem Class="ml-8">
                    <MudText Typo="Typo.h6">Valor por defecto</MudText>
                    <MudTextField Class="col-12" @bind-Value="valorPorDefecto" Label="Valor por defecto"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  ></MudTextField>
                </MudItem>
                <MudItem style="display:flex; justify-content:center; align-items:center; margin-top:40px;">
                    <MudButton Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Primary" @onclick="Agregar">Agregar</MudButton>
                </MudItem>
            </MudGrid>           
        </MudForm>
        
        </MudPaper>
      @* <MudItem >
           @*Recorrer el archivo 
                @if (readText.Length != 0)
                {
                <MudPaper Class="pa-16 ma-2" Elevation="3" style="border-radius:1rem; border:2px solid #594ae2;">
                   
                        @for (int i = 0; i < readText.Length; i++)
                        {
                            <MudTextField T="string" @bind-Value="@readText[i]" style="padding-top:0px; padding-bottom:0px;"/>
                        }
                    </MudPaper>                                 
                }
       </MudItem>*@
       <MudItem>
           @* <InputFile OnChange="LoadFiles" />
            <InputTextArea @bind-Value="textVar" cols="100" rows="20" />*@

            <MudTextField T="string" @bind-Value="@textVar" style="padding-top:0px; padding-bottom:0px; background-color:#333131; color:white; width=60px; height=40px;" Lines="20" />
       </MudItem>
       <MudItem Class="d-flex justify-content-end">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" style="margin-top:2rem;" OnClick="GuardarCambios">Guardar cambios</MudButton>
       </MudItem>

    </MudItem>
       

    <MudItem xs="4">

        <div id="another_unique_identifier" class="ma-0" style="height:80vh;overflow: auto; background-color:#F7F7F7;">
            <MudPaper Height="3500px" Class="d-flex justify-content-center py-2" style="background-color:#F7F7F7; ">
                
                    <MudList>
                        @foreach (var atributo in lstAtributos)
                        {
                            @*Se muestra todos los atributos del listado para mostrar*@
                            <MudExpansionPanels style="width:20rem; margin-bottom:0.8rem;">
                                <div ondragover="event.preventDefault()"
                                 Draggable="true"
                                 @ondragstart="() => OndragStart(atributo)"
                                 @ondrop="() => OnDrop(atributo)">
                                <MudExpansionPanel Text="@atributo.NombreAtributo" MaxHeight="@(tipoDatoSelecionado.ToString() == "Otro" ? 300 : 200)" @onmousedown="(()=>Expandir(atributo))" IsExpanded="@atributo.IsExpanded">

                                        <item>
                                        @if (!ModificarTipo)
                                        {
                                            <item style="display:flex">
                                                <MudTextField @bind-Value="atributo.TipoDato" Label="Tipo de Dato" style="margin-bottom:0.2rem;" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudCheckBox @bind-Checked="@ModificarTipo" Color="Color.Primary" >Modificar</MudCheckBox>
                                            </item>
                                        }
                                        else
                                        {
                                            <MudSelect Class="col-12" TValue="DataType" @bind-Value="tipoDatoFinal" Variant="Variant.Outlined"  Margin="Margin.Dense" style="margin-bottom:0.4rem;">
                                                    @foreach (DataType dataType in Enum.GetValues(typeof(DataType)))
                                                    {
                                                    <MudSelectItem Value="dataType" >@dataType</MudSelectItem>
                                                   
                                                    }
                                            </MudSelect>    
                                            
                                        }
                                                @if (tipoDatoSelecionado.ToString()=="Otro")
                                                {
                                            
                                                <MudTextField @bind-Value="@tipoDatoOtro" Label="Tipo Dato Personalizado" Variant="Variant.Outlined" Margin="Margin.Dense" style="margin-bottom:0.4rem;" />
                                                }

                                                <MudTextField @bind-Value="@atributo.AceptaNull" Label="Acepta Nulos" style="margin-bottom:0.4rem;" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="@atributo.ValorPorDefecto" Label="Valor por Defecto" style="margin-bottom:0.4rem;" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                        </item>

                                            <MudItem Class="d-flex justify-content-between">
                                                <MudItem Class="d-flex justify-content-start">
                                                    <MudFab Color="Color.Secondary" @onclick="(() => CambioTipoDato(atributo))" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small" />
                                                    <MudFab Color="Color.Secondary" @onclick="(() => CerrarPanel(atributo))" StartIcon="@Icons.Material.Filled.ArrowUpward" Size="Size.Small" />
                                                </MudItem>
                                                <MudItem Class="d-flex justify-content-end">
                                                    <MudFab Color="Color.Secondary" @onclick="(() => Eliminar(atributo))" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" />                                                
                                                </MudItem>
                                            </MudItem>
                                    </MudExpansionPanel>

                                </div>
                            </MudExpansionPanels>
                        }
                    </MudList>

            </MudPaper>
                <MudScrollToTop TopOffset="100" Selector="#another_unique_identifier" Style="z-index:2001;">
                     <div class="mud-theme-primary px-4 py-6 fixed" style="bottom:120px;right:100px;background-color:#673AB7; color:white; border-radius:2rem;">
                    Arriba
                    </div>              
                </MudScrollToTop>
        </div>

        @*Lista de la clase*@
       
            <MudItem style="display:flex; justify-content:center; align-items:center; margin-top:2rem;">
            <MudButton Variant="Variant.Filled" Disabled="@successGeneradora" Color="Color.Primary" @onclick="GenerarAcrhivo">Generar Clase</MudButton>
            </MudItem>
    </MudItem>
   
</MudGrid>




@code
{
    /// <summary>
    /// TODO
    /// 
    /// </summary>

    //Para manejo de errores formulario
    MudForm form;
    bool success;
    bool successGeneradora;
    string[] errors = { };
    // ref de MudTextField para acceder a la funcion FocusAsync()
    MudTextField<string> txtAtributo;

    //public MudExpansionPanel mudExpansion { get; set; }
    private bool IsExpanded = false;

    //Para valores de formulario
    public string NameSpace;
    public string nombreClase;
    public string nombreInterface;
    public string atributo;
    public bool aceptaNull;
    public string? valorPorDefecto;
    //variable para darle la opcion de elegir otro Tipo de dato
    public string? tipoDatoOtro;
    // Variable para modificar la tarjeta que contiene los datos del atributo
    public int tamañoItem=200;

    //Opciones de Dialog
    DialogOptions opciones = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true,CloseOnEscapeKey = true  };

    //Instancia el objeto y declaro el using static de la clase EnumTipodato para acceder al ella.
    public DataType tipoDatoSelecionado;
    public DataType tipoDatoFinal;

    //Booleano para modificar el tipo de dato si se desea
    Boolean ModificarTipo=false;
    //Instancia de clase
    Clase clase = new Clase();
    //Declaro un listado de Tipo Clase
    List<Clase> lstAtributos = new List<Clase>();

    // Variable para cargar el archivo
    public String[] readText = { };
    string rutaArchivo = "";

    //manejo de archivo. 
    StringBuilder textArea = new System.Text.StringBuilder(); 
    string textVar { get; set; } = string.Empty;


    //Variables de uso para manejar Drag and Drop
    private Clase objetoArrastrado; // para indicar el objeto arrastrado
    private bool arrastrando = false; // para saber si el elemento esta o no siendo arrastrado

    //Variable de tipo Clase para obtener el item que se esta drageando
    private Clase? ItemDrag { get; set; }


    public void Agregar()
    {
        //se invoca el metodo con los argumentos que ingresan por formulario

        clase.AgregarAtributo(atributo, tipoDatoSelecionado, aceptaNull, valorPorDefecto);
        CargarListado();
        LimpiarForm();
        StateHasChanged();
        txtAtributo.FocusAsync();
        success = false;
    }

    public void GenerarAcrhivo()
    {
        DialogGenerador(opciones);
    }



    private async void DialogGenerador(DialogOptions options)
    {

        //variable de parametro para mostrar la clase en el Dialog del otro lado. Si uso de momento
        var parameters = new DialogParameters
        {
            {"ListaDeAtributos", lstAtributos }, 
            {"NombreClase",nombreClase},
            {"Ruta", rutaArchivo}
        };

        var dialog = await DialogService.ShowAsync<D_ConfirmarDestinoDeClase>("Generar Clase", parameters, opciones);
        var result = await dialog.Result;

        // Al cerrar Dialog cargo el archivo creado
        if (!result.Canceled)
        {
            try
            {
                string rutaArchivo1 = ManejoDeArchivo.RutaDeArchivo();             
                var readTextAux = File.ReadAllLines(rutaArchivo1, Encoding.UTF8);

                textArea.Clear(); //se limpia el contenido en caso que se quiera modificar despues de haber enerado el archivo

                for (int i = 0; i < readTextAux.Length; i++)
                {
                    textArea.AppendLine(readTextAux[i].ToString());
                }
                textVar = textArea.ToString();

                File.SetAttributes(rutaArchivo1, FileAttributes.Normal);
                
                
                StateHasChanged();
            }
            catch (Exception e)
            {
                //Snackbar.Add("No existe el archivo",Severity.Warning);
                Snackbar.Add
                 (
                    @<div>
                        <h3>Error</h3>
                        <p>
                            No existe la ruta especifica para leer el archivo.
                            @e.Message
                        </p>
        </div>
    ,Severity.Warning);
            }
        }


    }
   
    public void GuardarCambios()
    {
        //var i = 1;
        //var test = textVar.Split(Environment.NewLine); // Environment.NewLine determina cuando salta la linea
        //foreach (var item in test)
        //{
        //    Console.WriteLine($"{i} {item}");
        //    i++;
        //}
        var test = textVar.Split(Environment.NewLine); // Environment.NewLine determina cuando salta la linea
        ManejoDeArchivo.ActualizarArchivo(test);
    }

    public void CargarListado()
    {
        lstAtributos=clase.listaAtributos;
    }

    //Actualizar el atributo por su nuevo tipo de dato.
    public void ActualizarLst(Clase atributo)
    {
        var ItemSeleccionado = lstAtributos.Where(x => x.NombreAtributo == atributo.NombreAtributo).FirstOrDefault();
        if (ItemSeleccionado != null)
        {
            ItemSeleccionado.TipoDato = tipoDatoFinal;

        }
    }

    public void LimpiarForm()
    {
        atributo="";
        aceptaNull=false;
        valorPorDefecto=string.Empty;

    }

    public void Eliminar(Clase atributo)
    {
        lstAtributos.Remove(atributo);
        StateHasChanged();

    }
    public void CambioTipoDato(Clase atributo)
    {

        //Guardo modificacion del tipo de dato del atributo filtrando la lista
        try
        {
            var ItemSeleccionado = lstAtributos.Where(x => x.NombreAtributo == atributo.NombreAtributo).FirstOrDefault();
            if (ItemSeleccionado != null)
            {

                ItemSeleccionado.TipoDato = tipoDatoFinal;
                ModificarTipo = false;

            }
        }
        catch (Exception e)
        {

            Snackbar.Add($"Ocurrio un problema {e.Message}", Severity.Error);
        }
        StateHasChanged();
    }


    // funcion OndragStart para obtener el item que esta siendo drageado
    // misa funcion con lambda private void OndragStart(Clase clase) => ItemDrag = clase;
    private void OndragStart(Clase clase)
    {
        ItemDrag = clase;
    }

    private void OnDrop(Clase itemDrop)
    {
        lstAtributos.Swap(itemDrop, ItemDrag);
        ItemDrag.IsExpanded = false;
    }

    public void Expandir(Clase atributo )
    {
        atributo.IsExpanded = true;
    }

    public void CerrarPanel(Clase atributo)
    {
        atributo.IsExpanded = false;
    }

    //Otro metodo para cargar un archivo
    //public async void LoadFiles( IBrowserFile file)
    //{
    //    var reader = new StreamReader(file.OpenReadStream()); 
    //    textVar = await reader.ReadToEndAsync();
    //    Console.WriteLine(textVar);
    //    StateHasChanged();
    //}

}